{"version":3,"sources":["../webpack/bootstrap",".././src/extension.ts","../external \"vscode\"",".././src/logging.ts",".././src/models/index.ts",".././src/models/constants.ts",".././src/models/enums.ts",".././src/commands.ts",".././src/configuration/index.ts",".././src/configuration/read-configuration.ts",".././src/configuration/update-configuration.ts"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as vscode from 'vscode';\nconst { commands, workspace } = vscode;\nimport { Logger } from './logging';\nimport { Commands } from './models';\nimport { hideSecretsHandler, showSecretsHandler } from './commands';\n\nexport function activate(context: vscode.ExtensionContext) {\n  Logger.info('Hide Secrets is initialized.');\n\n  registerCommands();\n}\n\nfunction registerCommands() {\n  commands.registerCommand(Commands.hideSecrets, hideSecretsHandler);\n  commands.registerCommand(Commands.showSecrets, showSecretsHandler);\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","import { OutputChannel, window } from 'vscode';\n\nexport class Logger {\n  private static _outputChannel: OutputChannel;\n\n  static initialize() {\n    if (!this._outputChannel) {\n      // Only init once\n      this._outputChannel = window.createOutputChannel('Peacock');\n    }\n  }\n\n  static getChannel() {\n    this.initialize();\n    return this._outputChannel;\n  }\n\n  static info(value: string | object | undefined, indent = false, title = '') {\n    if (title) {\n      this._outputChannel.appendLine(title);\n    }\n    const message = prepareMessage(value, indent);\n    this._outputChannel.appendLine(message);\n  }\n}\n\nfunction prepareMessage(value: string | object | undefined, indent: boolean) {\n  const prefix = indent ? '  ' : '';\n  let text = '';\n  if (typeof value === 'object') {\n    if (Array.isArray(value)) {\n      text = `${prefix}${JSON.stringify(value, null, 2)}`;\n    } else {\n      Object.entries(value).map(item => {\n        text += `${prefix}${item[0]} = ${item[1]}\\n`;\n      });\n    }\n    return text;\n  }\n  text = `${prefix}${value}`;\n  return text;\n}\n\nLogger.initialize();\n","import * as vscode from 'vscode';\nimport { extensionId } from './constants';\n\nexport * from './constants';\nexport * from './enums';\n\nexport function getExtension() {\n  let extension: vscode.Extension<any> | undefined;\n  const ext = vscode.extensions.getExtension(extensionId);\n  if (!ext) {\n    throw new Error('Extension was not found.');\n  }\n  if (ext) {\n    extension = ext;\n  }\n  return extension;\n}\n","import * as vscode from 'vscode';\n\nexport const extensionShortName = 'hide-secrets';\nexport const extensionId = 'johnpapa.vscode-hide-secrets';\n\nexport const timeout = async (ms = 200) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const isObjectEmpty = (o: {} | undefined) => typeof o === 'object' && Object.keys(o).length === 0;\n\n","export enum Commands {\n  hideSecrets = 'hideSecrets.hideSecrets',\n  showSecrets = 'hideSecrets.showSecrets'\n}\n\n// export enum Settings {\n//   BackgroundColor = 'background'\n// }\n\nexport enum Sections {\n  editorTokenColorCustomizationSection = 'editor.tokenColorCustomizations'\n}\n\nexport enum TextMateKeys {\n  envKeys = 'string.quoted.double.env,source.env,constant.numeric.env',\n  envComments = 'comment.line.number-sign.env'\n}\n","import * as vscode from 'vscode';\nimport { updateColorConfiguration } from './configuration';\nimport { TextMateKeys } from './models';\n\nexport async function hideSecretsHandler() {\n  const value = {\n    textMateRules: [\n      {\n        scope: TextMateKeys.envKeys,\n        settings: {\n          foreground: '#19354900'\n        }\n      },\n      {\n        scope: TextMateKeys.envComments,\n        settings: {\n          foreground: '#19354900'\n        }\n      }\n    ]\n  };\n  await updateColorConfiguration(value);\n}\n\nexport async function showSecretsHandler() {\n  const value = {};\n  await updateColorConfiguration(value);\n}\n","export * from './read-configuration';\nexport * from './update-configuration';\n","import * as vscode from 'vscode';\nimport { Sections } from '../models';\n\nconst { workspace } = vscode;\n\nexport function getColorCustomizationConfig() {\n  return workspace.getConfiguration(Sections.editorTokenColorCustomizationSection);\n}\n","import * as vscode from 'vscode';\nimport { ConfigurationTarget } from 'vscode';\nimport { extensionShortName, Sections } from '../models';\nimport { Logger } from '../logging';\n\n// export async function updateGlobalConfiguration<T>(setting: Settings, value?: any) {\n//   const config = vscode.workspace.getConfiguration();\n//   const section = `${extensionShortName}.${setting}`;\n//   Logger.info(`${extensionShortName}: Updating the user settings with the following changes:`);\n//   if (value && Array.isArray(value) && value.length > 0) {\n//     Logger.info(value, true, `${extensionShortName}:  ${section}`);\n//   } else {\n//     Logger.info(`${extensionShortName}: ${section} = ${value}`, true);\n//   }\n//   return await config.update(section, value, ConfigurationTarget.Global);\n// }\n\nexport async function updateColorConfiguration(colorCustomizations: {} | undefined) {\n  Logger.info(`${extensionShortName}: Updating the workspace with the following color customizations`);\n  Logger.info(colorCustomizations, true);\n  return await vscode.workspace\n    .getConfiguration()\n    .update(Sections.editorTokenColorCustomizationSection, colorCustomizations, ConfigurationTarget.Global);\n}\n"],"sourceRoot":""}