{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/models/index.ts",".././src/logging.ts",".././src/models/constants.ts",".././src/extension.ts",".././src/models/enums.ts",".././src/commands.ts",".././src/configuration/index.ts",".././src/configuration/read-configuration.ts",".././src/configuration/update-configuration.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","extension","ext","vscode","extensions","getExtension","extensionId","Error","Logger","this","_outputChannel","window","createOutputChannel","initialize","indent","title","appendLine","message","prefix","text","Array","isArray","JSON","stringify","entries","map","item","prepareMessage","extensionShortName","timeout","ms","Promise","resolve","setTimeout","isObjectEmpty","keys","length","commands","workspace","context","info","registerCommand","Commands","hideSecrets","hideSecretsHandler","Settings","Sections","updateColorConfiguration","getConfiguration","colorCustomizationSection","colorCustomizations","update","ConfigurationTarget","Global"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { extensionId } from './constants';\n\nexport * from './constants';\nexport * from './enums';\n\nexport function getExtension() {\n  let extension: vscode.Extension<any> | undefined;\n  const ext = vscode.extensions.getExtension(extensionId);\n  if (!ext) {\n    throw new Error('Extension was not found.');\n  }\n  if (ext) {\n    extension = ext;\n  }\n  return extension;\n}\n","import { OutputChannel, window } from 'vscode';\n\nexport class Logger {\n  private static _outputChannel: OutputChannel;\n\n  static initialize() {\n    if (!this._outputChannel) {\n      // Only init once\n      this._outputChannel = window.createOutputChannel('Peacock');\n    }\n  }\n\n  static getChannel() {\n    this.initialize();\n    return this._outputChannel;\n  }\n\n  static info(value: string | object | undefined, indent = false, title = '') {\n    if (title) {\n      this._outputChannel.appendLine(title);\n    }\n    const message = prepareMessage(value, indent);\n    this._outputChannel.appendLine(message);\n  }\n}\n\nfunction prepareMessage(value: string | object | undefined, indent: boolean) {\n  const prefix = indent ? '  ' : '';\n  let text = '';\n  if (typeof value === 'object') {\n    if (Array.isArray(value)) {\n      text = `${prefix}${JSON.stringify(value, null, 2)}`;\n    } else {\n      Object.entries(value).map(item => {\n        text += `${prefix}${item[0]} = ${item[1]}\\n`;\n      });\n    }\n    return text;\n  }\n  text = `${prefix}${value}`;\n  return text;\n}\n\nLogger.initialize();\n","import * as vscode from 'vscode';\n\nexport const extensionShortName = 'hide-secrets';\nexport const extensionId = 'johnpapa.vscode-hide-secrets';\n\nexport const timeout = async (ms = 200) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const isObjectEmpty = (o: {} | undefined) => typeof o === 'object' && Object.keys(o).length === 0;\n","import * as vscode from 'vscode';\nconst { commands, workspace } = vscode;\nimport { Logger } from './logging';\nimport { Commands } from './models';\nimport { hideSecretsHandler } from './commands';\n\nexport function activate(context: vscode.ExtensionContext) {\n  Logger.info('Hide Secrets is initialized.');\n\n  registerCommands();\n}\n\nfunction registerCommands() {\n  commands.registerCommand(Commands.hideSecrets, hideSecretsHandler);\n}\n\nexport function deactivate() {}\n","export enum Commands {\n  hideSecrets = 'hideSecrets.hideSecrets'\n}\n\nexport enum Settings {\n  WorkspaceColors = 'elementAdjustments'\n}\n\nexport enum Sections {\n  colorCustomizationSection = 'workbench.colorCustomizations'\n}\n","import * as vscode from 'vscode';\nimport { updateColorConfiguration } from './configuration';\n\nexport async function hideSecretsHandler() {\n  await updateColorConfiguration(' tbd ');\n}\n","export * from './read-configuration';\nexport * from './update-configuration';\n","import * as vscode from 'vscode';\nimport { Sections } from '../models';\n\nconst { workspace } = vscode;\n\nexport function getColorCustomizationConfig() {\n  return workspace.getConfiguration(Sections.colorCustomizationSection);\n}\n","import * as vscode from 'vscode';\nimport { ConfigurationTarget } from 'vscode';\nimport { extensionShortName, Settings, Sections } from '../models';\nimport { Logger } from '../logging';\n\n// export async function updateGlobalConfiguration<T>(setting: Settings, value?: any) {\n//   const config = vscode.workspace.getConfiguration();\n//   const section = `${extensionShortName}.${setting}`;\n//   Logger.info(`${extensionShortName}: Updating the user settings with the following changes:`);\n//   if (value && Array.isArray(value) && value.length > 0) {\n//     Logger.info(value, true, `${extensionShortName}:  ${section}`);\n//   } else {\n//     Logger.info(`${extensionShortName}: ${section} = ${value}`, true);\n//   }\n//   return await config.update(section, value, ConfigurationTarget.Global);\n// }\n\nexport async function updateColorConfiguration(colorCustomizations: {} | undefined) {\n  Logger.info(`${extensionShortName}: Updating the workspace with the following color customizations`);\n  Logger.info(colorCustomizations, true);\n  return await vscode.workspace\n    .getConfiguration()\n    .update(Sections.colorCustomizationSection, colorCustomizations, ConfigurationTarget.Global);\n}\n"],"sourceRoot":""}